keys:
  releasekey : followme

license key:

MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAscb1icDZU7808OcviDfPzFbimA0+ZKAwgs6W8HpEVaIpnRKPu4tWN1sId5cb3Ne0pENruUR27lZG9dks4qsiP5e+7R0H+DDOimt9SIpyY+fJ+/k3d5yDqAGO3tpa1NiD9AkN1t5Ni9s6bmJiF0/+raT6cR1wko9OsJqp/7nFr/RRf65OWqKJk1FnieBMt6otXnnEIxnGl2+8wMsBO3/N/fEi/cK23sF3QVzNq1GVBJa4Lw0svF0jrrS9uKheflsjBe67iWWUxYcVjK24BaTIJjDzUwuvmUKzz4lDWzv8clIDfHXvfGiCI1LpBkYKJ8bX80G/Ywf8ccYXslPBfmMpXwIDAQAB

App goals:

2) Mark which have been watched.
3) Remember where paused or stopped and resume next time
4) Display Full Title and credits below in a nice way
5) Should feel easy to watch a bit, relaunch and it takes you exactly back

9) record favorite moments (bookmarks) in video with single click, remember list of points to be rewatched later
10) What youtube should be, but simplified for watching only.  No comments or sharing etc, just watching experience
11) Killer features
    1) always restores where you were last time you watched
    2) speed, cached lists

14) stationary header, page numbers and floating overlay showing when scrolling

console play

https://developers.google.com/youtube/v3/docs/activities/list
channel id: "UCCXAzufqBhwf_ib6xLv7gMw"
part id: "snippet"
fields: items(snippet/title, snippet/thumbnails/high/url), nextPageToken, pageInfo

https://developers.google.com/youtube/v3/docs/subscriptions/list
channel id: "UCCXAzufqBhwf_ib6xLv7gMw"
items/snippet/title

// use if you want to login and get users videos
    <uses-permission android:name="android.permission.GET_ACCOUNTS"/>
    <uses-permission android:name="android.permission.USE_CREDENTIALS"/>

// --------------------------------------------------------

Terrance McKenna
Cosmos
Neil DeGrasse
AstroPsyics
Derby
newegg tv
Big Think
UFO Videos
SF Travel
Skateboard Tricks
Fractals
Doremon
Jason Silva
Tim Leary
Dali Lama
Carl Sagan
How it's made
The Bible
history channel
death
woody allen
the doors
Haul / makeup stuff
Top Gear
Bill Murray
WWE
Greenpeace
tales of the city


/*

Outline
1) Welcome
Quickstart guide for app name
swipe to continue
icon:heart?


2) Included Channels
These channels are from YouTube
icon:youtube

3)
icon:
Clicking an app is easier than navigating youtube
subscriptions become overwhelming
data is cached for quick viewing

4) Shortcuts
Pull down to refresh
swipe to hide

5) Usage


6) Channel list
disclaimer

7) Need help
send suggestions
tell me which channels I should remove or add

8) contact info
        message = "sgehrman@gmail.com

        Want a custom youtube app for your channel?  send me an email

         Please rate my app!
         app rate url:






        title = "Thanks!";
        message = "I'm glad you found my app.  Here's a quick start guide on how to use it.  \n\nSwipe screen to the next page...";

             title = "Why use this app?";
        message = "YouTube is great, but I find the app to be overwhelming.  This app is like a video magazine.  One subject with the top channels.";

            icon = ToolbarIcons.icon(getActivity(), ToolbarIcons.IconID.UPLOADS, color, iconSize);
        title = "General Usage";
        message = "Select a channel from the action bar on the top left.  Use the left drawer to navigate within the current channel.  Swipe cards away when your finished watching or not interested.";

             title = "I need your help!";
        message = "I'm just getting started and want to create the best app possible, so please send your feedback.  Did I include the BEST channels?  Are there other channels you would want to see in an app?";

              title = "Contact Info";
        message = "sgehrman@gmail.com \n\n Please rate my app!";
        break;
    }

 */

// --------------------------------------------------------

private static int cntt = 0;

  public YouTubeGridFragment(){
    super();
    cntt++;
  }




 @Override
  protected void finalize()
  {
    try {
      super.finalize();

    } catch(Throwable e) {

    }
    cntt--;
    Debug.log("gridffrag ------- " + cntt);
  }

android:exitFadeDuration="@android:integer/config_mediumAnimTime"



// --------------------------------------------------------


subtlepatterns.com


.bashrc
alias dd='cd ~/github/SickVids'

alias vv='dd; git status'
alias vvc='dd; git add .; git commit -am "nothing"; git push'
alias vvrm='git rm $(git ls-files --deleted)'

vun() {
  adb uninstall com.sickboots.sickvideos.$1
}

vunn() {
pack=com.sickboots.sickvideos.$1

for DEVICE in `adb devices | grep -v "List" | awk '{print $1}'`
do
  echo $DEVICE
  echo $pack

  adb -s $DEVICE uninstall $pack
done
}


// --------------------------------------------------------

http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle

signingConfigs {
    release {
        storeFile file(System.getenv("KEYSTORE"))
        storePassword System.getenv("KEYSTORE_PASSWORD")
        keyAlias System.getenv("KEY_ALIAS")
        keyPassword System.getenv("KEY_PASSWORD")
    }
}


signingConfigs {
    release {
        storeFile file(System.console().readLine("\n\$ Enter keystore path: "))
        storePassword System.console().readLine("\n\$ Enter keystore password: ")
        keyAlias System.console().readLine("\n\$ Enter key alias: ")
        keyPassword System.console().readLine("\n\$ Enter key password: ")
    }
}


// converting a list to []
    List<String> result = new ArrayList<String>();
    return result.toArray(new String[0]);


Fresh Apps and Salsa
Sugar High Studios
Sugar High Labs
Bacalava digital services
College dropout Labs
Giant Red Bridge labs
Lasers and other cool stuff, Inc.
Hookah Hut
Code-Mart
Sustainable bits
Harley Stevenson
Stefan's Code Supply
Code Surplus
Digital Surplus
Above the Fog
Surplus Code
OK CODE, Studios
Banjos and steamboats
No reason to get excited
remain calm
Getting late, labs
Barbary Coast Nerds
messages from space studios
I hear you
Fresh
Distant Planet Communications
Code Fresh
Durable Code
Lost Land
Lost and Found
Homecooked Code
Briggs and Stratton
Quik Kode





Channel groups:

Joe Rogan
Vice
xda

SCIENCE:
    Cosmos
    SpaceTV
    Nasa?
    Bill Nye
    NASA Jet Propulsion Laboratory

ATHEIST TV
   the gang
    Religion Hurts Humanity

UFOS:

CONSPIRACY
    Jesse ventura
    austin guy

    zeitgiest
    culture in decline

FOX NEWS
    guys on fox new
    Oreily?

NEWS
    RT
    Max Reiser
    Young Turks
    Aljazera
    ten

BUSINESS
    businessinsider
    forbes
    wsj
    entrepenour

STARTUPS:

PRANKS:
    stuart edge


SPORTS:
    Espn
    Sports Illustrated Swimsuit

Comedy:
    Comedy Central
    Colbert report
BuzzFeedYellow

CARTOONS:
    beavis
    Archer
    StitchOtaku626

PSYCHONAUT
    neurosoup
    dmt
    leary
    mckenna
    maps
    mellowmushgrapetripp
    national geographic lsd
    reefer madness

NERD:
    Nerdist
    Verge
    twit
    Fark/Digg?
    Kevin Rose
    TechCrunch
    revision3
    http://twit.tv/2013/01/10/changes-twit-youtube

TECH REVIEWS
    marquesbrownlee
    technobuffalo
    Unbox Therapy
    newegg


THINK:
    Big Think
    Ted, Tedx, Ted_ed
    Jason Silva
    Penn point
    Bullshit


GOOGLE DEVS:
    gOOGLE devs
    android devs
    youtube devs
    Android developers

EDUCATION
    Khan
    MIT stanford, etc?
    Google tech talks
    MinutePhysics

LEARN CODING
    Code.org
    marakana

POLITICS
    jfk
    ronald reagan


CARS:
    Top Gear
    car and driver
    automobile
    road and track

GAMES
    PewDiePie
    Minecraft

MAKEUP:

PHOTOGRAPHY
    DigitalRevCom

JAPANESE BLOGGERS
    JetDaisuke


HARDWARE
    lINustechtips
    new egg

MEDITATION

SELF HELP

ANDROID NEWS/TIPS
    BLack guy
    android central?

DOCUMENTARIES:
    BestdocumentaryTV


TRAVEL:
    soniastravels
    globetrekker

COOKING

WEIRD SCIENCE
    visual halucinations
    The Slow Mo Guys
    HIGH speed filming


MUSIC
   play guitar?

VIRAL VIDEOS

ADVERTISING:
    retro ads
    funny ads
    banned ads

GRATEFUL DEAD

ART
    Cyriac

FASHION NEWS

HOME SHIT
    This Old House

SAVE THE PLANET
    Beard lady

Rollerskate TV
    D. miles










    compile 'com.android.support:appcompat-v7:19.0.+'
    compile 'com.android.support:mediarouter-v7:19.0.+'






package com.sickboots.sickvideos.mainactivity;

import android.content.Context;
import android.os.Bundle;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.MediaRouteActionProvider;
import android.support.v7.media.MediaRouteSelector;
import android.support.v7.media.MediaRouter;
import android.support.v7.media.MediaRouter.RouteInfo;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;

import com.google.android.gms.cast.Cast;
import com.google.android.gms.cast.Cast.MessageReceivedCallback;
import com.google.android.gms.cast.CastDevice;
import com.google.android.gms.cast.CastMediaControlIntent;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.sickboots.sickvideos.R;
import com.sickboots.sickvideos.misc.Debug;
import com.sickboots.sickvideos.misc.Utils;

import java.io.IOException;

public class ChromecastHelper {

  private static final String TAG = "MainActivity";
  private Context mContext;
  private MediaRouter mMediaRouter;
  private MediaRouter.Callback mMediaRouterCallback;
  private MediaRouteSelector mMediaRouteSelector;
  private CastDevice mCastDevice;
  private GoogleApiClient mGoogleApiClient;
  private Cast.Listener mCastListener;
  private ConnectionCallbacks mConnectionCallbacks;
  private ConnectionFailedListener mConnectionFailedListener;
  private TextChannel mTextChannel;
  private boolean mApplicationStarted;
  private boolean mWaitingForReconnect;


  public ChromecastHelper(Context context) {
    mContext = context.getApplicationContext();

    mMediaRouter = MediaRouter.getInstance(mContext);
    mMediaRouteSelector = new MediaRouteSelector.Builder().addControlCategory(CastMediaControlIntent
        .categoryForCast(mContext.getResources().getString(R.string.chromecast_app_id))).build();
    mMediaRouterCallback = new MediaRouterCallback();
  }

  public void createOptionsMenu(Menu menu) {
    MenuItem mediaRouteItem = menu.findItem(R.id.media_route_item);
    MediaRouteActionProvider mediaRouteActionProvider = (MediaRouteActionProvider) MenuItemCompat.getActionProvider(mediaRouteItem);
    mediaRouteActionProvider.setRouteSelector(mMediaRouteSelector);
  }

  // ## must call from activity
  public void resume() {
    mMediaRouter.addCallback(mMediaRouteSelector, mMediaRouterCallback, MediaRouter.CALLBACK_FLAG_PERFORM_ACTIVE_SCAN);
  }

  // ## must call from activity
  public void pause(boolean isFinishing) {
    if (isFinishing) {
      mMediaRouter.removeCallback(mMediaRouterCallback);
    }
  }

  // ## must call from activity
  public void destroy() {
    doneCast();
  }

  private void sendText(String text) {
    if (null != mGoogleApiClient && null != mTextChannel) {
      try {
        Cast.CastApi.sendMessage(mGoogleApiClient, mTextChannel.getNamespace(), text)
            .setResultCallback(new ResultCallback<Status>() {
              @Override
              public void onResult(Status status) {
                if (!status.isSuccess()) {
                  // TODO
                }
              }
            });
      } catch (Exception ex) {
        Log.e(TAG, "sendText: ", ex);
      }
    } else {
      Debug.log(text);
    }
  }

  private void initCast(Bundle bundle) {
    try {
      mCastDevice = CastDevice.getFromBundle(bundle);
      mCastListener = new CastListener();
      mConnectionCallbacks = new ConnectionCallbacks();
      mConnectionFailedListener = new ConnectionFailedListener();

      Cast.CastOptions.Builder optionsBuilder = Cast.CastOptions.builder(mCastDevice, mCastListener);
      mGoogleApiClient = new GoogleApiClient.Builder(mContext).addApi(Cast.API, optionsBuilder.build())
          .addConnectionCallbacks(mConnectionCallbacks)
          .addOnConnectionFailedListener(mConnectionFailedListener)
          .build();

      mGoogleApiClient.connect();
    } catch (Exception ex) {
      Log.e(TAG, "initCast: ", ex);
    }
  }

  private void doneCast() {
    if (null != mGoogleApiClient) {
      if (mApplicationStarted) {
        try {
          Cast.CastApi.stopApplication(mGoogleApiClient);
          if (null != mTextChannel) {
            Cast.CastApi.removeMessageReceivedCallbacks(mGoogleApiClient, mTextChannel.getNamespace());
            mTextChannel = null;
          }
        } catch (IOException ex) {
          Log.e(TAG, "doneCast: ", ex);
        }
        mApplicationStarted = false;
      }

      if (mGoogleApiClient.isConnected()) {
        mGoogleApiClient.disconnect();
      }
      mGoogleApiClient = null;
    }

    mCastDevice = null;
    mWaitingForReconnect = false;
  }

  private void setChannel() {
    try {
      Cast.CastApi.setMessageReceivedCallbacks(mGoogleApiClient, mTextChannel.getNamespace(), mTextChannel);
    } catch (IOException ex) {
      Log.e(TAG, "setChannel: ", ex);
    }
  }

  private class MediaRouterCallback extends MediaRouter.Callback {
    @Override
    public void onRouteSelected(MediaRouter router, RouteInfo info) {
      initCast(info.getExtras());
    }

    @Override
    public void onRouteUnselected(MediaRouter router, RouteInfo info) {
      doneCast();
    }
  }

  private class CastListener extends Cast.Listener {
    @Override
    public void onApplicationDisconnected(int errorCode) {
      doneCast();
    }
  }

  private class ConnectionCallbacks implements GoogleApiClient.ConnectionCallbacks {
    @Override
    public void onConnected(Bundle connectionHint) {
      if (null == mGoogleApiClient)
        return;

      try {
        if (mWaitingForReconnect) {
          mWaitingForReconnect = false;

          if ((null != connectionHint) && connectionHint.getBoolean(Cast.EXTRA_APP_NO_LONGER_RUNNING)) {
            doneCast();
          } else {
            setChannel();
          }
        } else {
          Cast.CastApi.launchApplication(mGoogleApiClient, mContext.getString(R.string.chromecast_app_id), false)
              .setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>() {
                @Override
                public void onResult(Cast.ApplicationConnectionResult result) {
                  Status status = result.getStatus();
                  if (status.isSuccess()) {
                    mApplicationStarted = true;
                    mTextChannel = new TextChannel();
                    setChannel();
                    sendText("yo, niggas");
                  } else {
                    doneCast();
                  }
                }
              });

        }
      } catch (Exception ex) {
        Log.e(TAG, "onConnected: ", ex);
      }
    }

    @Override
    public void onConnectionSuspended(int cause) {
      mWaitingForReconnect = true;
    }
  }

  private class ConnectionFailedListener implements GoogleApiClient.OnConnectionFailedListener {
    @Override
    public void onConnectionFailed(ConnectionResult result) {
      doneCast();
    }
  }

  private class TextChannel implements MessageReceivedCallback {
    public String getNamespace() {
      return "urn:x-cast:" + Utils.getApplicationPackageName(mContext);
    }

    @Override
    public void onMessageReceived(CastDevice device, String namespace, String message) {
      Debug.log(message);
    }
  }

}


